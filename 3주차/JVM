# JVM

JVM이란?(Java Virtual Machine)

JVM은 자바를 실행하는 가상머신 입니다.

자바는 OS에 독립적으로 동작합니다. 즉, OS가 Unix 기반이어도, Linux 기반 이어도 해당 OS에 맞는 JVM만 설치되어 있다면 자바는 어디서든 실행될 수 있습니다.

OS 마다 다른 시스템 콜을 가지고 있기 때문에 각 OS에 맞는 형식으로 컴파일 해주어야 하는 언어와 달리 자바로 작성된 언어는 어디서든 작동(Once Write Run Anywhere)합니다.

어떻게?

자바로 작성된 파일은 .java 의 형식을 가지는 소스코드에서 JVM의 클래스 로더를 통해 .class 형식을 가지는 바이트 코드로 변환 됩니다. 그 후 바이트 코드는 JVM을 통해 기계어(binary code)로 변환되어 실행됩니다.

JDK?(Java Development Kit)

JDK는 Java 애플리케이션 개발에 사용할 수 있는 도구의 모음 입니다.

컴파일러 , 디버거, 일반적인 개발 도구들을 포함하고 있습니다.

JRE?(Java Runtime Environment)

JRE는 자바가 JVM에서 원할하게 작동하기 위한 요소들 입니다.

JDK를 사용해 생성한 Java 코드를 라이브러리와 결합해 Java 프로그램을 실행하는 JVM 인스턴스를 복사합니다. 이렇게 복사된 로컬 복사본은 OS에 독립으로 실행될 수 있는 환경을 제공합니다.

JDK vs JRE?

JRE는 JDK의 상위 소프트웨어 계층 입니다.

작성한 소스코드(.java)를 JDK가 바이트 코드(.class) 파일로 컴파일 후 JRE에 전달 합니다.

JRE에 포함된 클래스 라이브러리, 컬렉션 프레임 워크, 플러그 인 등으로 바이트 코드를 실행할 수 있도록 해줍니다.

JRE 구성 요소

- Class Loader : 런타임 중 필요한 클래스를 메모리에 로드해주는 역할을 합니다.
- 인터프리터 : 컴파일러에 의해 변환된 바이트 코드(.class 파일)를 기계어(binary code)로 변환 해줍니다.
- JIT(Just-In Time) 컴파일러 : 인터프리터로 바이트 코드를 한 줄씩 읽는 JVM의 성능을 향상 시켜주기 위한 컴파일러 입니다. 자주 사용되는 메서드를 캐싱해두고 사용할 때 빠르게 사용하여 성능을 향상시켜 줍니다.
- GC(Garbage Collector) : 힙 메모리를 자동으로 관리해줍니다.